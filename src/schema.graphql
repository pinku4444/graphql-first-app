type Query {
       me: User !
       post: Post!
       users(query: String): [User!]!
       posts(query: String): [Post!]!
       comments: [Comment!]!
   }
   type Mutation {
       createUser(data: CreateUserInput): User!
       deleteUser(id:ID!): User!
       updateUser(id:ID!,data: UpdateUserInput): User!
       createPost(data: CreatePostInput) : Post!
       deletePost(id: ID!): Post!
       updatePost(id:ID!,data:UpdatePostInput): Post!
       createComment(data:CreateCommentsInput): Comment!
       deleteComment(id: ID!) : Comment!
       updateComment(id: ID!, data: updateCommentInput): Comment!
   }

   type Subscription {
       count : Int!
       comment(id: ID!): CommentSubsciptionPayload!
       post: PostSubscriptionPayload!
   }

   input CreateUserInput {
       name: String!
       email: String!
       age: Int
   }
   input UpdateUserInput {
       name: String
       email: String
       age: Int
   }

   input CreatePostInput {
       title: String!
       body: String!
       published: Boolean!
       author: ID!
   }

   input UpdatePostInput {
       title: String
       body: String
       published: Boolean
   }

   input CreateCommentsInput {
       text: String!
       author: ID!
       post: ID!
   }
   input updateCommentInput {
       text: String
   }
   type CommentSubsciptionPayload {
       Mutation:MutationType!
       data: Comment
   }

   type Comment {
       id: ID!
       text: String!
       author: User!
       post : Post!
   }

   type User {
       id: ID!
       name: String!
       email: String!
       age: Int
       post: [Post!]!
       comments: [Comment!]!
   }

   type Post {
       id: ID!
       title: String!
       body: String!
       published: Boolean!
       author: User!
       comments: [Comment!]!
   }
   type PostSubscriptionPayload {
       Mutation: MutationType!
       data: Post!
   }
   
   enum MutationType {
       DELETED
       CREATED
       UPDATED
   }